<html lang="en"><head>
  <meta charset="UTF-8">
  
<link rel="apple-touch-icon" type="image/png" href="https://cpwebassets.codepen.io/assets/favicon/apple-touch-icon-5ae1a0698dcc2402e9712f7d01ed509a57814f994c660df9f7a952f3060705ee.png">
<meta name="apple-mobile-web-app-title" content="CodePen">

<link rel="shortcut icon" type="image/x-icon" href="https://cpwebassets.codepen.io/assets/favicon/favicon-aec34940fbc1a6e787974dcd360f2c6b63348d4b1f4e06c77743096d55480f33.ico">

<link rel="mask-icon" type="image/x-icon" href="https://cpwebassets.codepen.io/assets/favicon/logo-pin-8f3771b1072e3c38bd662872f6b673a722f4b3ca2421637d5596661b4e2132cc.svg" color="#111">


  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>CodePen - Voyage Slider | GSAP</title>

  <link rel="stylesheet" media="screen" href="https://cpwebassets.codepen.io/assets/fullpage/fullpage-96f5da14bc71e5883d519b4eb5e93297dde552c2f91a97fcfb30035219cf1c1a.css">
  
  
<link rel="apple-touch-icon" type="image/png" href="https://cpwebassets.codepen.io/assets/favicon/apple-touch-icon-5ae1a0698dcc2402e9712f7d01ed509a57814f994c660df9f7a952f3060705ee.png">
<meta name="apple-mobile-web-app-title" content="CodePen">

<link rel="shortcut icon" type="image/x-icon" href="https://cpwebassets.codepen.io/assets/favicon/favicon-aec34940fbc1a6e787974dcd360f2c6b63348d4b1f4e06c77743096d55480f33.ico">

<link rel="mask-icon" type="image/x-icon" href="https://cpwebassets.codepen.io/assets/favicon/logo-pin-8f3771b1072e3c38bd662872f6b673a722f4b3ca2421637d5596661b4e2132cc.svg" color="#111">




  <title>CodePen - Voyage Slider | GSAP</title>
  <script>
  if (document.location.search.match(/type=embed/gi)) {
    window.parent.postMessage("resize", "*");
  }
</script>


  <style>
    html { font-size: 15px; }
    html, body { margin: 0; padding: 0; min-height: 100%; }
    body { height:100%; display: flex; flex-direction: column; }
    .referer-warning {
      background: black;
      box-shadow: 0 2px 5px rgba(0,0,0, 0.5);
      padding: 0.75em;
      color: white;
      text-align: center;
      font-family: var(--cp-font-family);
      line-height: 1.2;
      font-size: 1rem;
      position: relative;
      z-index: 2;
    }
    .referer-warning h1 { font-size: 1.2rem; margin: 0; }
    .referer-warning a { color: #56bcf9; } /* $linkColorOnBlack */
  </style>
</head>

<body class="">
  

  <div id="result-iframe-wrap" role="main">

    <iframe id="result" srcdoc="
<!DOCTYPE html>
<html lang=&quot;en&quot; >

<head>

  <meta charset=&quot;UTF-8&quot;>
  
<link rel=&quot;apple-touch-icon&quot; type=&quot;image/png&quot; href=&quot;https://cpwebassets.codepen.io/assets/favicon/apple-touch-icon-5ae1a0698dcc2402e9712f7d01ed509a57814f994c660df9f7a952f3060705ee.png&quot; />
<meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;CodePen&quot;>

<link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;https://cpwebassets.codepen.io/assets/favicon/favicon-aec34940fbc1a6e787974dcd360f2c6b63348d4b1f4e06c77743096d55480f33.ico&quot; />

<link rel=&quot;mask-icon&quot; type=&quot;image/x-icon&quot; href=&quot;https://cpwebassets.codepen.io/assets/favicon/logo-pin-8f3771b1072e3c38bd662872f6b673a722f4b3ca2421637d5596661b4e2132cc.svg&quot; color=&quot;#111&quot; />


  
  <title>CodePen - Voyage Slider | GSAP</title>
  
  
  <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.1/css/all.min.css'>
<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Montserrat&amp;amp;display=swap&quot;rel=&quot;stylesheet'>
  
<style>
@import url(&quot;https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600;700;800&amp;display=swap&quot;);
:root {
  --card-width: 200px;
  --card-height: 300px;
  --card-transition-duration: 800ms;
  --card-transition-easing: ease;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  width: 100%;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.787);
  overflow: hidden;
}

button {
  border: none;
  background: none;
  cursor: pointer;
}
button:focus {
  outline: none;
  border: none;
}

.app {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}
.app__bg {
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: -5;
  filter: blur(8px);
  pointer-events: none;
  user-select: none;
  overflow: hidden;
}
.app__bg::before {
  content: &quot;&quot;;
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: #000;
  z-index: 1;
  opacity: 0.8;
}
.app__bg__image {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%) translateX(var(--image-translate-offset, 0));
  width: 180%;
  height: 180%;
  transition: transform 1000ms ease, opacity 1000ms ease;
  overflow: hidden;
}
.app__bg__image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.app__bg__image.current--image {
  opacity: 1;
  --image-translate-offset: 0;
}
.app__bg__image.previous--image, .app__bg__image.next--image {
  opacity: 0;
}
.app__bg__image.previous--image {
  --image-translate-offset: -25%;
}
.app__bg__image.next--image {
  --image-translate-offset: 25%;
}

.cardList {
  position: absolute;
  width: calc(3 * var(--card-width));
  height: auto;
}
.cardList__btn {
  --btn-size: 35px;
  width: var(--btn-size);
  height: var(--btn-size);
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 100;
}
.cardList__btn.btn--left {
  left: -5%;
}
.cardList__btn.btn--right {
  right: -5%;
}
.cardList__btn .icon {
  width: 100%;
  height: 100%;
}
.cardList__btn .icon svg {
  width: 100%;
  height: 100%;
}
.cardList .cards__wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  perspective: 1000px;
}

.card {
  --card-translateY-offset: 100vh;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%) translateX(var(--card-translateX-offset)) translateY(var(--card-translateY-offset)) rotateY(var(--card-rotation-offset)) scale(var(--card-scale-offset));
  display: inline-block;
  width: var(--card-width);
  height: var(--card-height);
  transition: transform var(--card-transition-duration) var(--card-transition-easing);
  user-select: none;
}
.card::before {
  content: &quot;&quot;;
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: #000;
  z-index: 1;
  transition: opacity var(--card-transition-duration) var(--card-transition-easing);
  opacity: calc(1 - var(--opacity));
}
.card__image {
  position: relative;
  width: 100%;
  height: 100%;
}
.card__image img {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.card.current--card {
  --current-card-rotation-offset: 0;
  --card-translateX-offset: 0;
  --card-rotation-offset: var(--current-card-rotation-offset);
  --card-scale-offset: 1.2;
  --opacity: 0.8;
}
.card.previous--card {
  --card-translateX-offset: calc(-1 * var(--card-width) * 1.1);
  --card-rotation-offset: 25deg;
}
.card.next--card {
  --card-translateX-offset: calc(var(--card-width) * 1.1);
  --card-rotation-offset: -25deg;
}
.card.previous--card, .card.next--card {
  --card-scale-offset: 0.9;
  --opacity: 0.4;
}

.infoList {
  position: absolute;
  width: calc(3 * var(--card-width));
  height: var(--card-height);
  pointer-events: none;
}
.infoList .info__wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: flex-start;
  align-items: flex-end;
  perspective: 1000px;
  transform-style: preserve-3d;
}

.info {
  margin-bottom: calc(var(--card-height) / 8);
  margin-left: calc(var(--card-width) / 1.5);
  transform: translateZ(2rem);
  transition: transform var(--card-transition-duration) var(--card-transition-easing);
}
.info .text {
  position: relative;
  font-family: &quot;Montserrat&quot;;
  font-size: calc(var(--card-width) * var(--text-size-offset, 0.2));
  white-space: nowrap;
  color: #fff;
  width: fit-content;
}
.info .name,
.info .location {
  text-transform: uppercase;
}
.info .location {
  font-weight: 800;
}
.info .location {
  --mg-left: 40px;
  --text-size-offset: 0.12;
  font-weight: 600;
  margin-left: var(--mg-left);
  margin-bottom: calc(var(--mg-left) / 2);
  padding-bottom: 0.8rem;
}
.info .location::before, .info .location::after {
  content: &quot;&quot;;
  position: absolute;
  background: #fff;
  left: 0%;
  transform: translate(calc(-1 * var(--mg-left)), -50%);
}
.info .location::before {
  top: 50%;
  width: 20px;
  height: 5px;
}
.info .location::after {
  bottom: 0;
  width: 60px;
  height: 2px;
}
.info .description {
  --text-size-offset: 0.065;
  font-weight: 500;
}
.info.current--info {
  opacity: 1;
  display: block;
}
.info.previous--info, .info.next--info {
  opacity: 0;
  display: none;
}

.loading__wrapper {
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background: #000;
  z-index: 200;
}
.loading__wrapper .loader--text {
  color: #fff;
  font-family: &quot;Montserrat&quot;;
  font-weight: 500;
  margin-bottom: 1.4rem;
}
.loading__wrapper .loader {
  position: relative;
  width: 200px;
  height: 2px;
  background: rgba(255, 255, 255, 0.25);
}
.loading__wrapper .loader span {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: red;
  transform: scaleX(0);
  transform-origin: left;
}

@media only screen and (min-width: 800px) {
  :root {
    --card-width: 250px;
    --card-height: 400px;
  }
}
.support {
  position: absolute;
  right: 10px;
  bottom: 10px;
  padding: 10px;
  display: flex;
}
.support a {
  margin: 0 10px;
  color: #fff;
  font-size: 1.8rem;
  backface-visibility: hidden;
  transition: all 150ms ease;
}
.support a:hover {
  transform: scale(1.1);
}
</style>

  <script>
  window.console = window.console || function(t) {};
</script>

  
  
  <script>
  if (document.location.search.match(/type=embed/gi)) {
    window.parent.postMessage(&quot;resize&quot;, &quot;*&quot;);
  }
</script>


</head>

<body translate=&quot;no&quot; >
  <div class=&quot;app&quot;>

	<div class=&quot;cardList&quot;>
		<button class=&quot;cardList__btn btn btn--left&quot;>
			<div class=&quot;icon&quot;>
				<svg>
					<use xlink:href=&quot;#arrow-left&quot;></use>
				</svg>
			</div>
		</button>

		<div class=&quot;cards__wrapper&quot;>
			<div class=&quot;card current--card&quot;>
				<div class=&quot;card__image&quot;>
					<img src=&quot;https://source.unsplash.com/Z8dtTatMVMw&quot; alt=&quot;&quot; />
				</div>
			</div>

			<div class=&quot;card next--card&quot;>
				<div class=&quot;card__image&quot;>
					<img src=&quot;https://source.unsplash.com/9dmycbFE7mQ&quot; alt=&quot;&quot; />
				</div>
			</div>

			<div class=&quot;card previous--card&quot;>
				<div class=&quot;card__image&quot;>
					<img src=&quot;https://source.unsplash.com/m7K4KzL5aQ8&quot; alt=&quot;&quot; />
				</div>
			</div>
		</div>

		<button class=&quot;cardList__btn btn btn--right&quot;>
			<div class=&quot;icon&quot;>
				<svg>
					<use xlink:href=&quot;#arrow-right&quot;></use>
				</svg>
			</div>
		</button>
	</div>

	<div class=&quot;infoList&quot;>
		<div class=&quot;info__wrapper&quot;>
			<div class=&quot;info current--info&quot;>
				<h1 class=&quot;text name&quot;>Highlands</h1>
				<h4 class=&quot;text location&quot;>Scotland</h4>
				<p class=&quot;text description&quot;>The mountains are calling</p>
			</div>

			<div class=&quot;info next--info&quot;>
				<h1 class=&quot;text name&quot;>Machu Pichu</h1>
				<h4 class=&quot;text location&quot;>Peru</h4>
				<p class=&quot;text description&quot;>Adventure is never far away</p>
			</div>

			<div class=&quot;info previous--info&quot;>
				<h1 class=&quot;text name&quot;>Chamonix</h1>
				<h4 class=&quot;text location&quot;>France</h4>
				<p class=&quot;text description&quot;>Let your dreams come true</p>
			</div>
		</div>
	</div>


	<div class=&quot;app__bg&quot;>
		<div class=&quot;app__bg__image current--image&quot;>
			<img src=&quot;https://source.unsplash.com/Z8dtTatMVMw&quot; alt=&quot;&quot; />
		</div>
		<div class=&quot;app__bg__image next--image&quot;>
			<img src=&quot;https://source.unsplash.com/9dmycbFE7mQ&quot; alt=&quot;&quot; />
		</div>
		<div class=&quot;app__bg__image previous--image&quot;>
			<img src=&quot;https://source.unsplash.com/m7K4KzL5aQ8&quot; alt=&quot;&quot; />
		</div>
	</div>
</div>

<div class=&quot;loading__wrapper&quot;>
	<div class=&quot;loader--text&quot;>Loading...</div>
	<div class=&quot;loader&quot;>
		<span></span>
	</div>
</div>


<svg class=&quot;icons&quot; style=&quot;display: none;&quot;>
	<symbol id=&quot;arrow-left&quot; xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'>
		<polyline points='328 112 184 256 328 400'
					 style='fill:none;stroke:#fff;stroke-linecap:round;stroke-linejoin:round;stroke-width:48px' />
	</symbol>
	<symbol id=&quot;arrow-right&quot; xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'>
		<polyline points='184 112 328 256 184 400'
					 style='fill:none;stroke:#fff;stroke-linecap:round;stroke-linejoin:round;stroke-width:48px' />
	</symbol>
</svg>











<div class=&quot;support&quot;>
	<a href=&quot;https://twitter.com/DevLoop01&quot; target=&quot;_blank&quot;><i class=&quot;fab fa-twitter-square&quot;></i></a>
	<a href=&quot;https://dribbble.com/devloop01&quot; target=&quot;_blank&quot;><i class=&quot;fab fa-dribbble&quot;></i></a>
</div>
    <script src=&quot;https://cpwebassets.codepen.io/assets/common/stopExecutionOnTimeout-2c7831bb44f98c1391d6a4ffda0e1fd302503391ca806e7fcc7b9b87197aec26.js&quot;></script>

  <script src='https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/gsap/3.3.3/gsap.min.js'></script>
      <script id=&quot;rendered-js&quot; >
console.clear();

const { gsap, imagesLoaded } = window;

const buttons = {
  prev: document.querySelector(&quot;.btn--left&quot;),
  next: document.querySelector(&quot;.btn--right&quot;) };

const cardsContainerEl = document.querySelector(&quot;.cards__wrapper&quot;);
const appBgContainerEl = document.querySelector(&quot;.app__bg&quot;);

const cardInfosContainerEl = document.querySelector(&quot;.info__wrapper&quot;);

buttons.next.addEventListener(&quot;click&quot;, () => swapCards(&quot;right&quot;));

buttons.prev.addEventListener(&quot;click&quot;, () => swapCards(&quot;left&quot;));

function swapCards(direction) {
  const currentCardEl = cardsContainerEl.querySelector(&quot;.current--card&quot;);
  const previousCardEl = cardsContainerEl.querySelector(&quot;.previous--card&quot;);
  const nextCardEl = cardsContainerEl.querySelector(&quot;.next--card&quot;);

  const currentBgImageEl = appBgContainerEl.querySelector(&quot;.current--image&quot;);
  const previousBgImageEl = appBgContainerEl.querySelector(&quot;.previous--image&quot;);
  const nextBgImageEl = appBgContainerEl.querySelector(&quot;.next--image&quot;);

  changeInfo(direction);
  swapCardsClass();

  removeCardEvents(currentCardEl);

  function swapCardsClass() {
    currentCardEl.classList.remove(&quot;current--card&quot;);
    previousCardEl.classList.remove(&quot;previous--card&quot;);
    nextCardEl.classList.remove(&quot;next--card&quot;);

    currentBgImageEl.classList.remove(&quot;current--image&quot;);
    previousBgImageEl.classList.remove(&quot;previous--image&quot;);
    nextBgImageEl.classList.remove(&quot;next--image&quot;);

    currentCardEl.style.zIndex = &quot;50&quot;;
    currentBgImageEl.style.zIndex = &quot;-2&quot;;

    if (direction === &quot;right&quot;) {
      previousCardEl.style.zIndex = &quot;20&quot;;
      nextCardEl.style.zIndex = &quot;30&quot;;

      nextBgImageEl.style.zIndex = &quot;-1&quot;;

      currentCardEl.classList.add(&quot;previous--card&quot;);
      previousCardEl.classList.add(&quot;next--card&quot;);
      nextCardEl.classList.add(&quot;current--card&quot;);

      currentBgImageEl.classList.add(&quot;previous--image&quot;);
      previousBgImageEl.classList.add(&quot;next--image&quot;);
      nextBgImageEl.classList.add(&quot;current--image&quot;);
    } else if (direction === &quot;left&quot;) {
      previousCardEl.style.zIndex = &quot;30&quot;;
      nextCardEl.style.zIndex = &quot;20&quot;;

      previousBgImageEl.style.zIndex = &quot;-1&quot;;

      currentCardEl.classList.add(&quot;next--card&quot;);
      previousCardEl.classList.add(&quot;current--card&quot;);
      nextCardEl.classList.add(&quot;previous--card&quot;);

      currentBgImageEl.classList.add(&quot;next--image&quot;);
      previousBgImageEl.classList.add(&quot;current--image&quot;);
      nextBgImageEl.classList.add(&quot;previous--image&quot;);
    }
  }
}

function changeInfo(direction) {
  let currentInfoEl = cardInfosContainerEl.querySelector(&quot;.current--info&quot;);
  let previousInfoEl = cardInfosContainerEl.querySelector(&quot;.previous--info&quot;);
  let nextInfoEl = cardInfosContainerEl.querySelector(&quot;.next--info&quot;);

  gsap.timeline().
  to([buttons.prev, buttons.next], {
    duration: 0.2,
    opacity: 0.5,
    pointerEvents: &quot;none&quot; }).

  to(
  currentInfoEl.querySelectorAll(&quot;.text&quot;),
  {
    duration: 0.4,
    stagger: 0.1,
    translateY: &quot;-120px&quot;,
    opacity: 0 },

  &quot;-=&quot;).

  call(() => {
    swapInfosClass(direction);
  }).
  call(() => initCardEvents()).
  fromTo(
  direction === &quot;right&quot; ?
  nextInfoEl.querySelectorAll(&quot;.text&quot;) :
  previousInfoEl.querySelectorAll(&quot;.text&quot;),
  {
    opacity: 0,
    translateY: &quot;40px&quot; },

  {
    duration: 0.4,
    stagger: 0.1,
    translateY: &quot;0px&quot;,
    opacity: 1 }).


  to([buttons.prev, buttons.next], {
    duration: 0.2,
    opacity: 1,
    pointerEvents: &quot;all&quot; });


  function swapInfosClass() {
    currentInfoEl.classList.remove(&quot;current--info&quot;);
    previousInfoEl.classList.remove(&quot;previous--info&quot;);
    nextInfoEl.classList.remove(&quot;next--info&quot;);

    if (direction === &quot;right&quot;) {
      currentInfoEl.classList.add(&quot;previous--info&quot;);
      nextInfoEl.classList.add(&quot;current--info&quot;);
      previousInfoEl.classList.add(&quot;next--info&quot;);
    } else if (direction === &quot;left&quot;) {
      currentInfoEl.classList.add(&quot;next--info&quot;);
      nextInfoEl.classList.add(&quot;previous--info&quot;);
      previousInfoEl.classList.add(&quot;current--info&quot;);
    }
  }
}

function updateCard(e) {
  const card = e.currentTarget;
  const box = card.getBoundingClientRect();
  const centerPosition = {
    x: box.left + box.width / 2,
    y: box.top + box.height / 2 };

  let angle = Math.atan2(e.pageX - centerPosition.x, 0) * (35 / Math.PI);
  gsap.set(card, {
    &quot;--current-card-rotation-offset&quot;: `${angle}deg` });

  const currentInfoEl = cardInfosContainerEl.querySelector(&quot;.current--info&quot;);
  gsap.set(currentInfoEl, {
    rotateY: `${angle}deg` });

}

function resetCardTransforms(e) {
  const card = e.currentTarget;
  const currentInfoEl = cardInfosContainerEl.querySelector(&quot;.current--info&quot;);
  gsap.set(card, {
    &quot;--current-card-rotation-offset&quot;: 0 });

  gsap.set(currentInfoEl, {
    rotateY: 0 });

}

function initCardEvents() {
  const currentCardEl = cardsContainerEl.querySelector(&quot;.current--card&quot;);
  currentCardEl.addEventListener(&quot;pointermove&quot;, updateCard);
  currentCardEl.addEventListener(&quot;pointerout&quot;, e => {
    resetCardTransforms(e);
  });
}

initCardEvents();

function removeCardEvents(card) {
  card.removeEventListener(&quot;pointermove&quot;, updateCard);
}

function init() {

  let tl = gsap.timeline();

  tl.to(cardsContainerEl.children, {
    delay: 0.15,
    duration: 0.5,
    stagger: {
      ease: &quot;power4.inOut&quot;,
      from: &quot;right&quot;,
      amount: 0.1 },

    &quot;--card-translateY-offset&quot;: &quot;0%&quot; }).

  to(cardInfosContainerEl.querySelector(&quot;.current--info&quot;).querySelectorAll(&quot;.text&quot;), {
    delay: 0.5,
    duration: 0.4,
    stagger: 0.1,
    opacity: 1,
    translateY: 0 }).

  to(
  [buttons.prev, buttons.next],
  {
    duration: 0.4,
    opacity: 1,
    pointerEvents: &quot;all&quot; },

  &quot;-=0.4&quot;);

}

const waitForImages = () => {
  const images = [...document.querySelectorAll(&quot;img&quot;)];
  const totalImages = images.length;
  let loadedImages = 0;
  const loaderEl = document.querySelector(&quot;.loader span&quot;);

  gsap.set(cardsContainerEl.children, {
    &quot;--card-translateY-offset&quot;: &quot;100vh&quot; });

  gsap.set(cardInfosContainerEl.querySelector(&quot;.current--info&quot;).querySelectorAll(&quot;.text&quot;), {
    translateY: &quot;40px&quot;,
    opacity: 0 });

  gsap.set([buttons.prev, buttons.next], {
    pointerEvents: &quot;none&quot;,
    opacity: &quot;0&quot; });


  images.forEach(image => {
    imagesLoaded(image, instance => {
      if (instance.isComplete) {
        loadedImages++;
        let loadProgress = loadedImages / totalImages;

        gsap.to(loaderEl, {
          duration: 1,
          scaleX: loadProgress,
          backgroundColor: `hsl(${loadProgress * 120}, 100%, 50%` });


        if (totalImages == loadedImages) {
          gsap.timeline().
          to(&quot;.loading__wrapper&quot;, {
            duration: 0.8,
            opacity: 0,
            pointerEvents: &quot;none&quot; }).

          call(() => init());
        }
      }
    });
  });
};

waitForImages();
//# sourceURL=pen.js
    </script>

  

</body>

</html>
 
" sandbox="allow-forms allow-modals allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-top-navigation-by-user-activation allow-downloads allow-presentation" allow="accelerometer; camera; encrypted-media; display-capture; geolocation; gyroscope; microphone; midi; clipboard-read; clipboard-write; web-share" allowtransparency="true" allowpaymentrequest="true" allowfullscreen="true" class="result-iframe">
      </iframe>

  </div>


</body></html>
